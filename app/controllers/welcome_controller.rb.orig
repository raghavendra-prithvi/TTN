class WelcomeController < ApplicationController
  before_filter :require_login, :except => ["activate_user"]
  before_filter :require_activation, :except => ["activate_user","send_mail"]
  before_filter :require_client_restrict

  def index
  	puts params[:notice]
    today = Date.today
    @todayRecs = TimeTable.where(:date => today,:user_id => session[:user_id])    
    @user = User.find(session[:user_id])
    @aps = AssignedProjects.where(:user_id => @user.id)
    @selectArray = [["Please Select", ""]]
    @aps.each do |a|
      p = Project.find(a.project_id)
      @selectArray << [p.name, p.id]
    end
  end

<<<<<<< HEAD
  def approve_report
    @user = User.find(params[:uid])
    @reporting_pair = Reporter.where(:reported_id => params[:uid])
    @reporting_pair[0].approved = true
    @reporting_pair[0].submitted = false
    @reporting_pair[0].save
=======
  def approve_report    
    @sr = SubmittedReported.find(params[:rid])
    @sr.updated = false
    @user.save
>>>>>>> d631b22d6a678ff00327ba145d9dba7bffb2838a
    redirect_to :controller => "welcome", :action => "index", :notice => "Approved successfully"
  end
 
  def reject_report
    
  end
  
  
  def activate_user
    @user = User.find_by_token(params[:token])
    @user.confirmed = "t"
    @user.save
    if @user.client
    	redirect_to '/new_client?active=true', :notice => "You account has been successfully activated."
    else
    	redirect_to welcome_index_path, :notice => "Your Account has been Activated  successfully"
 	end
  end
  
  def send_mail
      @user = User.find(session[:user_id])
      @url = request.base_url + "/activate_user?token="+@user.token
      WelcomeMailer.registration_confirmation(@user,@url).deliver  
      render :text => "Thanks for registering with us.\n Activation mail has been sent successfully to " + @user.email + ". Please activate your account. <br/><button id='data' class='btn btn-primary' value='activate' onclick='window.location.href=\"/send_mail\"'> click here  </button> to resend activation mail"
  end
  
  def verify_report
    @tm = Date.today.strftime("%B %Y")    
    @first_day_of_month = Date.today.beginning_of_month
    @last_day_of_month = Date.today.end_of_month
    @monthdays = []
    @days = []
    @total_hours = 0
<<<<<<< HEAD
    @user = User.find(params[:uid])
    @user_name = @user.first_name + ' ' + @user.last_name
    @manager = User.find(session[:user_id])
    @manager_name = @manager.first_name + ' ' + @manager.last_name
=======
    @sr = SubmittedReport.find(params[:rid])    
    @user = User.find(@sr.report_for)
>>>>>>> d631b22d6a678ff00327ba145d9dba7bffb2838a
    (@first_day_of_month..@last_day_of_month).each { |d| 
      @days << d.strftime("%-d %B %Y || %m/%d/%Y")
      data = {}
      day = d.strftime("%Y-%m-%d")
      logger.info(day)
      todayRecs = TimeTable.where(:date => d,:user_id => params[:uid] )      
      todayRecs.each do |td|
        td.date = d
        k = td
        k.date = d
        @monthdays << k        
        @total_hours += td.hours.to_f
      end
      if todayRecs.length == 0
        tn = Hash.new
        tn.date = day
        tn.hours = 0
        tn.project_id = 0
        @monthdays << tn
      end
    }  
    @sr.visited = true
    @sr.save
  end
  
  def submit_report
    @tm = Date.today.strftime("%B %Y")    
    @first_day_of_month = Date.today.beginning_of_month
    @last_day_of_month = Date.today.end_of_month
    @monthdays = []
    @days = []
    @total_hours = 0
    @reporting_pair = Reporter.where(:reported_id => session[:user_id])
    @reporter = User.find(@reporting_pair[0].reporter_id)
    @reporter_name = @reporter.first_name + ' ' + @reporter.last_name
    (@first_day_of_month..@last_day_of_month).each { |d| 
      @days << d.strftime("%-d %B %Y || %m/%d/%Y")
      data = {}
      day = d.strftime("%Y-%m-%d")
      todayRecs = TimeTable.where(:date => d,:user_id => session[:user_id])      
      todayRecs.each do |td|
        td.date = d
        k = td
        k.date = d
        @monthdays << k
        #@monthdays.date = d
        @total_hours += td.hours.to_f
      end
      if todayRecs.length == 0
        tn = Hash.new
        tn.date = day
        tn.hours = 0
        tn.project_id = 0
        @monthdays << tn
      end
    }   
    @totalRecs = TimeTable.where(:user_id => session[:user_id])
  end
  
  def send_report
<<<<<<< HEAD
    @user = User.find(session[:user_id])
    @reporting_pair = Reporter.where(:reported_id => session[:user_id])
    @reporting_pair[0].submitted = true
    @reporting_pair[0].approved = false
	if @reporting_pair[0].save
   		redirect_to :controller => "welcome",:action => "index", :notice => "Submited the report successfully."
  	end
=======
     @user = User.find(session[:user_id])
#     @user.updated = true
#     @user.save
    @cmonth = Date::MONTHNAMES[Date.today.month]
    @sr = SubmittedReport.where(:month => @cmonth, :report_for => @user.id)
    if @sr.blank?
      @sr_new = SubmittedReport.new
      @sr_new.report_for = @user.id
      @sr_new.month = @cmonth 
      @sr_new.submitted_to = @user.reporter
      @sr_new.save
      redirect_to :controller => "welcome",:action => "index", :notice => "Submited the report successfully."
    else
      redirect_to :controller => "welcome",:action => "submit_report", :notice => "You have already submitted the report."
    end
#     @reporting_user = User.find(@user.reporter)
#     @reporting_user.updated = true
#     @reporting_user.save
    
>>>>>>> d631b22d6a678ff00327ba145d9dba7bffb2838a
  end
  
  def saveDayTime
    if params[:today]
      if params[:id].nil? || params[:id].empty?
        time = TimeTable.new
      else
        time = TimeTable.find(params[:id])
      end
      today = Date.strptime(params[:today], '%m/%d/%Y')
      time.user_id = session[:user_id]
      time.project_id = params[:project]
      time.date = today
      time.hours = params[:hours]
      time.save
    end
    data = {}
    data[:id] = time.id
    data[:msg] = "saved Successfully"
    render :json => data.to_json
  end

  def saveTime
    if params[:hiddenMonday]
      day = Date.strptime(params[:hiddenMonday], '%m/%d/%Y') 
      time = TimeTable.new
      time.user_id = session[:user_id]
      time.project_id = params[:project]
      time.date = day
      time.hours = params[:monday]
      time.save
    end
    if params[:hiddenTuesday]
      day = Date.strptime(params[:hiddenTuesday], '%m/%d/%Y')	
      time = TimeTable.new
      time.user_id = session[:user_id]
      time.project_id = params[:project]
      time.date = day
      time.hours = params[:tuesday]
      time.save
    end
    if params[:wednesdayHidden]
      day = Date.strptime(params[:wednesdayHidden], '%m/%d/%Y')
      time = TimeTable.new
      time.user_id = session[:user_id]
      time.project_id = params[:project]
      time.date = day
      time.hours = params[:wednesday]
      time.save
    end
    if params[:thursdayHidden]
      day = Date.strptime(params[:thursdayHidden], '%m/%d/%Y')
      time = TimeTable.new
      time.user_id = session[:user_id]
      time.project_id = params[:project]
      time.date = day
      time.hours = params[:thursday]
      time.save
    end
    if params[:fridayHidden]
      day = Date.strptime(params[:fridayHidden], '%m/%d/%Y')
      time = TimeTable.new
      time.user_id = session[:user_id]
      time.project_id = params[:project]
      time.date = day
      time.hours = params[:friday]
      time.save
    end
    if params[:saturdayHidden]
      day = Date.strptime(params[:saturdayHidden], '%m/%d/%Y')
      time = TimeTable.new
      time.user_id = session[:user_id]
      time.project_id = params[:project]
      time.date = day
      time.hours = params[:saturday]
      time.save
    end
    if params[:sundayHidden]
      day = Date.strptime(params[:sundayHidden], '%m/%d/%Y')
      time = TimeTable.new
      time.user_id = session[:user_id]
      time.project_id = params[:project]
      time.date = day
      time.hours = params[:sunday]
      time.save
    end
    render :text => "saved successfully"
  end

  def loadToDay
    today = Date.strptime(params[:toDay], '%m/%d/%Y')
    @todayRecs = TimeTable.where(:date => today, :user_id => session[:user_id])
    render :html => "loadToDay", :layout => false
  end

  def deleteDayTimesheets    
    @rec = TimeTable.where(:id => params[:id],:user_id => session[:user_id] )
    data = {}    
    if @rec[0].destroy
      data[:deleted] = true
      data[:msg] = "deleted successfully"
    else
      data[:deleted] = false
      data[:msg] = "Unable to delete the timesheet. Please try again."
    end
    render :json => data.to_json
  end

	def createPieChart
		   puts "********************************PIE CHART******************************"
   		   puts params.inspect
		   pieHash = {}        
		   today = Date.strptime(params[:today], '%m/%d/%Y')
    	@pieRow = TimeTable.alpha.where(:date => today,:user_id => session[:user_id] )
		
		unless @pieRow.nil?
			@pieRow.each do |t|
				project = Project.find(t.project_id)
				if pieHash.has_key?(project.name)
					puts project.name
					i = pieHash[project.name]
					pieHash[project.name] = i + t.hours
				else
					pieHash[project.name] = t.hours
				end
			end
		end
			puts pieHash
			@initialPieHash = pieHash.to_json
			render :json => pieHash.to_json
		end
<<<<<<< HEAD
		
	def checkPrevTimeSheets
		puts "********************************PREV TIME SHEET CHECK******************************"
		puts params.inspect
		data = {}
		today = Date.today
		pastDate = today
		amountOfDays = 3
		emptyDay = false
		count = 0
		while count < amountOfDays
			count += 1
			pastDate = pastDate - 1
			pastDate = (pastDate.wday == 6) ? pastDate - 1 : (pastDate.wday == 0) ? pastDate - 2 : pastDate
			timeTablePastDay = TimeTable.where(:date => pastDate,:user_id => session[:user_id] )
			if timeTablePastDay.blank?
				emptyDay = true
			end
			puts count
			puts pastDate
		end
		if emptyDay
			data[:empty] = true
			render :json => data.to_json
		else
			data[:empty] = false
			render :json => data.to_json
		end
	end

		
	
=======
>>>>>>> d631b22d6a678ff00327ba145d9dba7bffb2838a
end

class Hash
  attr_accessor :date,:hours,:project_id
end

