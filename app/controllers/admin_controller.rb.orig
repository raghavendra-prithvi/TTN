class AdminController < ApplicationController
  before_filter :require_admin
  def index
    
  end

  def users
      @users = User.all
  end

  def projects
     @project = Project.all
  end
  
  def saveModifiedHours
    @tt = TimeModifiedReport.where(:reporting_user => params[:user],:modified_manager => session[:user_id], :project => params[:projectId] )
    if @tt.empty?
      @tt = TimeModifiedReport.new
      @tt.reporting_user = params[:user]
      @tt.modified_manager = session[:user_id]
      @tt.project = params[:projectId]
      @tt.modified_hours = params[:hours]
      @tt.save
    else      
      @tt[0].modified_hours = params[:hours]
      @tt[0].save
    end
    render :text => "Saved Successfully"
  end
  
  def newReportEmployee
    @user = User.find(session[:user_id])
    @reporting_users = User.all#Reporter.where(:reporter_id => session[:user_id])
    @reporting_users  = @reporting_users - [@user]  
    @emp_users = []
    @cmonth = Date::MONTHNAMES[Date.today.last_month.month]
    @reporting_users.each do |r|
      @r= r #User.find(r.reported_id)
      if !@r.nil?
        if(params[:type] == 'classified')
          if(@r.role == "Classified")
            @emp_users << @r
          end    
        end
        if(params[:type] == 'unclassified')
          if(@r.role == "Unclassified")
            @emp_users << @r        
          end
        end
      end
    end  
  end
  
  def updateUser
    @user = User.find(params[:id])
    @user.first_name = params[:first_name]
    @user.last_name = params[:last_name]
    @user.manager = params[:manager]    
    @user.time_sheet_manager = params[:time_sheet_manager]
#     if (params[:time_sheet_manager].strip == true || params[:time_sheet_manager].strip == 'true')
#       puts "inside the true---------------------"
#       @user.time_sheet_manager = true
#     else
#       @user.time_sheet_manager = false
#     end
    
    if(!params[:reporter].nil? && @user.reporter != params[:reporter])
      @user.reporter = params[:reporter]
      @reporting_relation = Reporter.where(:reported_id => params[:id]).first
      if(!@reporting_relation.nil?)
        @reporting_relation.reporter_id = params[:reporter]
        @reporting_relation.save
      else
        @new_reporting_relation = Reporter.new
        @new_reporting_relation.reported_id = params[:id]
        @new_reporting_relation.reporter_id = params[:reporter]
        @new_reporting_relation.save
      end
      if(!@user.reporter.nil? && @user.reporter != 0)
          @reporting_user = User.find(@user.reporter)
          @reporting_user.reported_by = @user.id
          @reporting_user.save
      end
    end
    @identity = Identity.where(:email => @user.email).first
    formEmail = params[:email] + '@louisiana.edu'
    if(@user.email != formEmail)
      @user.email = formEmail
      if !@identity.nil?
        @identity.email = formEmail
        @identity.save
      end
    end
    @user.role = params[:role]
    @user.save
    render :text => "saved successfully"
  end

  def deleteUser  	
    @user = User.find(params[:id])
    @identity = Identity.where(:email => @user.email.split("@")[0]).first
    #formEmail = @user.email + '@louisiana.edu'
    if !@identity.nil?
        #@identity.email = formEmail
        @identity.destroy
    end
    @user.destroy
    render :text => "Deleted Successfully"
  end
  
  def assign_users
    @reporting_users = Reporter.where(:reporter_id => session[:user_id])
    @r_users= []
    @reporting_users.each do |r|
      @r= User.find(r.reported_id)
      if !@r.nil?
        @r_users << @r
      end
    end
    @projects = Project.all
    @assignedProjects = AssignedProject.all
    @project_users = Hash.new
        @projects.each do |p|
      @aps = AssignedProject.where(:project_id => p.id)
          @project_users[p.id] = @aps
      end
  end
  
  def assignProjects
    if(!params[:users].nil?)
        @users = User.find(params[:users].split(","))
        @projects = Project.find(params[:projects].split(","))
        @user=User.find(session[:user_id])
        @users.each do |u|
          @projects.each do |p|
            @ap = AssignedProject.where(:user_id => u.id, :project_id => p.id).first
            if @ap.nil?
              @ap_new = AssignedProject.new
              @ap_new.user_id = u.id
              @ap_new.project_id = p.id
              @ap_new.save
            end
          end
        end
    end
    @projects = []
    Project.all.each do |p|
    	p.project_managers.each do |pm|
    		if pm.user_id == @user.id
    			@projects << p
    		end
    	end
    end
    @project_users = Hash.new
    @projects.each do |p|
        @aps = AssignedProject.where(:project_id => p.id)
        @project_users[p.id] = @aps
    end
    render :html => 'assignProjects', :layout => false
    #render :text => "saved successfully"
  end
  
  
  def manager
    @reporting_users = Reporter.where(:reporter_id => session[:user_id])
    @archive_projects_all = ArchievedProject.all
    @archive_projects = []
    @user = User.find(session[:user_id])
    @r_users= []
    @reporting_users.each do |r|
      @r = User.where(:id => r.reported_id)
      if !@r[0].nil?
        @r_users << @r[0]
      end
    end
    @projects = []
    Project.all.each do |p|
    	p.project_managers.each do |pm|
    		if pm.user_id == @user.id
    			@projects << p
    		end
    	end
    end
<<<<<<< HEAD
        
    @internals = []
    InternalProject.all.each do |p|
    	p.internal_project_managers.each do |pm|
    		if pm.user_id == @user.id
    			@internals << p
    		end
    	end
    end
    @work_orders
    ActualWorkOrder.all.each do |p|
    	p.work_order_project_managers.each do |pm|
    		if pm.user_id == @user.id
    			@work_orders << p
    		end
    	end
    end

=======
    @archive_projects_all.each do |ap|
      apm = ProjectManager.where(:project_id => ap.project_id)
      apm.each do |apmi|
        if apmi.user_id == @user.id
          @archive_projects << ap
        end
      end  
    end
>>>>>>> 07fca237765b2f453693a50b52bcf849d9a789c2
    @assignedProjects = AssignedProject.all
    @project_users = Hash.new
    if !@projects.blank?
    @projects.each do |p|
          @aps = AssignedProject.where(:project_id => p.id)
          @project_users[p.id] = @aps
    end
    end
    
    @assignedInternals = AssignedInternalProject.all
    @internal_project_users = Hash.new
    if !@internals.blank?
    @internals.each do |p|
          @aps = AssignedInternalProject.where(:internal_project_id => p.id)
          @internal_project_users[p.id] = @aps
    end
	end

    @assignedWorkOrders = AssignedWorkOrder.all
    @wo_project_users = Hash.new
    if !@work_orders.blank?
    @work_orders.each do |p|
          @aps = AssignedWorkOrder.where(:actual_work_order_id => p.id)
          @wo_project_users[p.id] = @aps
    end
    end

  end
  


  
  def removeProjects
  #    render :text => params[:data]
	@user = User.find(session[:user_id])
     project_user_data = params[:data].split(",")
    project_user_data.each do |x|
      up = x.split("_")
      if up.length == 2
        u = up[0]
        p = up[1]
        @user = User.find(u)
        @project = Project.find(p)
        @ap = AssignedProject.where(:user_id => @user.id, :project_id => @project.id)
        @ap.destroy_all
      end
    end
    @projects = []
    Project.all.each do |p|
    	p.project_managers.each do |pm|
    		if pm.user_id == @user.id
    			@projects << p
    		end
    	end
    end
    @project_users = Hash.new
    @projects.each do |p|
        @aps = AssignedProject.where(:project_id => p.id)
        @project_users[p.id] = @aps
    end
    
#     #redirect_to :action => "assignProjects"
#     @projects = []
#     Project.all.each do |p|
#     	p.project_managers.each do |pm|
#     		if pm.user_id == @user.id
#     			@projects << p
#     		end
#     	end
#     end
#     @project_users = Hash.new
#     @projects.each do |p|
#         @aps = AssignedProject.where(:project_id => p.id)
#         @project_users[p.id] = @aps
#     end
    render :html => 'removeProjects', :layout => false
  end  
  
  def manageReports
    @user = User.find(session[:user_id])
    @reporting_users = User.all#Reporter.where(:reporter_id => session[:user_id])
    @reporting_users  = @reporting_users - [@user]
    @r_users= []
    @sr_ga_users = []
    @classified_users = []
    @cmonth = Date::MONTHNAMES[Date.today.last_month.month]
    @submitted_reports = SubmittedReport.where(:submitted_to => @user.id, :month => @cmonth, :approved => false, :rejected => false)
    @submitted_reports.each do |s|
      @sr_ga_users << User.find(s.report_for)      
    end
    @ga_users = []
    @unc_users = []
    @other_users = []
    @reporting_users.each do |r|
      @r= r #User.find(r.reported_id)
      if !@r.nil?
        if(@r.role == "GA")          
          @ga_users << @r
        elsif(@r.role == "Classified")
          @classified_users << @r
        elsif(@r.role == "Unclassified")
          @unc_users << @r
        else
          @other_users << @r
        end          
      end
    end
    @us_ga_users = @ga_users - @sr_ga_users
  end
  
  # on change of month
  def monthlyEmployeeReport
    @user = User.find(session[:user_id])
    @reporting_users = User.all#Reporter.where(:reporter_id => session[:user_id])
    @reporting_users = @reporting_users - [@user]
    @r_users = []    
    @classified_users = []
    @cmonth = Date::MONTHNAMES[Date.today.last_month.month]    
    @unc_users = []
    @other_users = []
    @reporting_users.each do |r|
      @r= r 
      if !@r.nil?
        if(@r.role == "Classified")
          @classified_users << @r
        elsif(@r.role == "Unclassified")
          @unc_users << @r
        else
          @other_users << @r
        end          
      end
    end
    render :html => "monthlyEmployeeReport", :layout => false    
  end
  
  ## data csv ###
  def classifiedReport    
    @user = User.find(session[:user_id])
    @reporting_users = Reporter.where(:reporter_id => session[:user_id])    
    @classified_users = []    
    @reporting_users.each do |r|
      @r= User.find(r.reported_id)
      if !@r.nil?
        if(@r.role == "Classified")          
          @classified_users << @r        
        end                  
      end
    end
    user_csv = CSV.generate do |csv|        
        csv << ["CLID", "Account Number", "Hours", "Name"]        
        @classified_users.each do |u|         
           @ap = AssignedProject.where(:user_id => u.id)
           @ap.each do |a|
              @p = Project.where(:id => a.project_id).first          
              if !@p.nil?
                   @tts = TimeTable.where(:user_id => u.id, :project_id => @p.id) 
                   @hrs = 0 
                   @tts.each do |t| 
                      @hrs += t.hours 
                   end
              else
                  @p = ArchievedProject.where(:project_id => a.project_id).first
                  @tts = TimeTable.where(:user_id => u.id, :project_id => @p.project_id)
                  @hrs = 0
                  @tts.each do |t|
                      @hrs += t.hours
                  end
              end
              csv << [u.email.split("@")[0], @p.acct_number, @hrs,u.name]                               
          end
         end
    end
    send_data(user_csv, :type => 'test/csv', :filename => 'Classified_Employees_Report.csv') 
  end
  
  
   ## data csv ###
  def unclassifiedReport    
    @user = User.find(session[:user_id])
    @reporting_users = Reporter.where(:reporter_id => session[:user_id])    
    @classified_users = []    
    @reporting_users.each do |r|
      @r= User.find(r.reported_id)
      if !@r.nil?
        if(@r.role == "Unclassified")          
          @classified_users << @r        
        end                  
      end
    end
    reporter_csv = CSV.generate do |csv|        
      csv << ["CLID", "Account Number", "Hours", "Name"]       
        @classified_users.each do |u|         
           @ap = AssignedProject.where(:user_id => u.id)
           @ap.each do |a|
              @p = Project.where(:id => a.project_id).first          
              if !@p.nil?
                   @tts = TimeTable.where(:user_id => u.id, :project_id => @p.id) 
                   @hrs = 0 
                   @tts.each do |t| 
                      @hrs += t.hours 
                   end
              else
                  @p = ArchievedProject.where(:project_id => a.project_id).first
                  @tts = TimeTable.where(:user_id => u.id, :project_id => @p.project_id)
                  @hrs = 0
                  @tts.each do |t|
                      @hrs += t.hours
                  end
              end
              csv << [u.email.split("@")[0], @p.acct_number, @hrs,u.name]                               
          end
         end
    end
    send_data(reporter_csv, :type => 'test/csv', :filename => 'Unclassified_Employees_Report.csv') 
  end
  
  ## data csv for new Report ###
  def employeeReportUpdated    
    @user = User.find(session[:user_id])
    @reporting_users = Reporter.where(:reporter_id => session[:user_id])    
    @employee_users = []    
    @reporting_users = @reporting_users - [@user]
    @reporting_users.each do |r|
      @r= User.find(r.reported_id)
      if !@r.nil?        
        if params[:type] == "classified"
          if(@r.role == "Classified")          
            @employee_users << @r        
          end
        end
        if params[:type] == "unclassified"
          if(@r.role == "Unclassified")          
            @employee_users << @r        
          end
        end
      end
    end
    user_csv = CSV.generate do |csv|        
      csv << ["CLID", "Account Number", "Hours", "Name"]        
        @employee_users.each do |u|         
           @ap = AssignedProject.where(:user_id => u.id)
           @ap.each do |a|
              @p = Project.where(:id => a.project_id).first          
              if !@p.nil?
                   @tts = TimeTable.where(:user_id => u.id, :project_id => @p.id) 
                   @hrs = 0 
                   @tts.each do |t| 
                      @hrs += t.hours 
                   end
              else
                  @p = ArchievedProject.where(:project_id => a.project_id).first
                  @tts = TimeTable.where(:user_id => u.id, :project_id => @p.project_id)
                  @hrs = 0
                  @tts.each do |t|
                      @hrs += t.hours
                  end
              end 
              @tts = TimeTable.where(:user_id => u.id, :project_id => @p.id)
              @hrs = 0
              @tts.each do |t|
                @hrs += t.hours
              end
              @tr = TimeModifiedReport.where(:reporting_user => u.id, :modified_manager => session[:user_id], :project => @p.id ).first
          if !@tr.nil?
              @hrs = @tr.modified_hours            
          end 
              csv << [u.email.split("@")[0], @p.acct_number, @hrs,u.name]                               
          end
         end
    end
    send_data(user_csv, :type => 'test/csv', :filename => 'Classified_Employees_Report.csv') 
  end
  
  
   def assign_project_manager
    if(!params[:user_id].nil?)
        @manager = User.find(params[:user_id])
        @project = Project.find(params[:project_id])
		@ap = ProjectManagers.where(:user_id => u.id, :project_id => p.id)
	 	if @ap.nil?
	  		@ap_new = AssignedProject.new
	  		@ap_new.user_id = @manager.id
	  		@ap_new.project_id = @project.id
	  		@ap_new.save
        end
    end
    #render :json => 'assignProjects', :layout => false
    #render :text => "saved successfully"
  end
 
end
  